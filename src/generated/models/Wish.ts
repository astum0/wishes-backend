
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Wish` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.js"
import type * as Prisma from "../internal/prismaNamespace.js"

/**
 * Model Wish
 * 
 */
export type WishModel = runtime.Types.Result.DefaultSelection<Prisma.$WishPayload>

export type AggregateWish = {
  _count: WishCountAggregateOutputType | null
  _avg: WishAvgAggregateOutputType | null
  _sum: WishSumAggregateOutputType | null
  _min: WishMinAggregateOutputType | null
  _max: WishMaxAggregateOutputType | null
}

export type WishAvgAggregateOutputType = {
  id: number | null
  userId: number | null
}

export type WishSumAggregateOutputType = {
  id: number | null
  userId: number | null
}

export type WishMinAggregateOutputType = {
  id: number | null
  title: string | null
  description: string | null
  link: string | null
  isCompleted: boolean | null
  priority: $Enums.Priority | null
  userId: number | null
}

export type WishMaxAggregateOutputType = {
  id: number | null
  title: string | null
  description: string | null
  link: string | null
  isCompleted: boolean | null
  priority: $Enums.Priority | null
  userId: number | null
}

export type WishCountAggregateOutputType = {
  id: number
  title: number
  description: number
  link: number
  isCompleted: number
  priority: number
  userId: number
  _all: number
}


export type WishAvgAggregateInputType = {
  id?: true
  userId?: true
}

export type WishSumAggregateInputType = {
  id?: true
  userId?: true
}

export type WishMinAggregateInputType = {
  id?: true
  title?: true
  description?: true
  link?: true
  isCompleted?: true
  priority?: true
  userId?: true
}

export type WishMaxAggregateInputType = {
  id?: true
  title?: true
  description?: true
  link?: true
  isCompleted?: true
  priority?: true
  userId?: true
}

export type WishCountAggregateInputType = {
  id?: true
  title?: true
  description?: true
  link?: true
  isCompleted?: true
  priority?: true
  userId?: true
  _all?: true
}

export type WishAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Wish to aggregate.
   */
  where?: Prisma.WishWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Wishes to fetch.
   */
  orderBy?: Prisma.WishOrderByWithRelationInput | Prisma.WishOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.WishWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Wishes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Wishes.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Wishes
  **/
  _count?: true | WishCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: WishAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: WishSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: WishMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: WishMaxAggregateInputType
}

export type GetWishAggregateType<T extends WishAggregateArgs> = {
      [P in keyof T & keyof AggregateWish]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateWish[P]>
    : Prisma.GetScalarType<T[P], AggregateWish[P]>
}




export type WishGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.WishWhereInput
  orderBy?: Prisma.WishOrderByWithAggregationInput | Prisma.WishOrderByWithAggregationInput[]
  by: Prisma.WishScalarFieldEnum[] | Prisma.WishScalarFieldEnum
  having?: Prisma.WishScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: WishCountAggregateInputType | true
  _avg?: WishAvgAggregateInputType
  _sum?: WishSumAggregateInputType
  _min?: WishMinAggregateInputType
  _max?: WishMaxAggregateInputType
}

export type WishGroupByOutputType = {
  id: number
  title: string
  description: string
  link: string
  isCompleted: boolean
  priority: $Enums.Priority
  userId: number
  _count: WishCountAggregateOutputType | null
  _avg: WishAvgAggregateOutputType | null
  _sum: WishSumAggregateOutputType | null
  _min: WishMinAggregateOutputType | null
  _max: WishMaxAggregateOutputType | null
}

type GetWishGroupByPayload<T extends WishGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<WishGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof WishGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], WishGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], WishGroupByOutputType[P]>
      }
    >
  >



export type WishWhereInput = {
  AND?: Prisma.WishWhereInput | Prisma.WishWhereInput[]
  OR?: Prisma.WishWhereInput[]
  NOT?: Prisma.WishWhereInput | Prisma.WishWhereInput[]
  id?: Prisma.IntFilter<"Wish"> | number
  title?: Prisma.StringFilter<"Wish"> | string
  description?: Prisma.StringFilter<"Wish"> | string
  link?: Prisma.StringFilter<"Wish"> | string
  isCompleted?: Prisma.BoolFilter<"Wish"> | boolean
  priority?: Prisma.EnumPriorityFilter<"Wish"> | $Enums.Priority
  userId?: Prisma.IntFilter<"Wish"> | number
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}

export type WishOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  description?: Prisma.SortOrder
  link?: Prisma.SortOrder
  isCompleted?: Prisma.SortOrder
  priority?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  user?: Prisma.UserOrderByWithRelationInput
}

export type WishWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  AND?: Prisma.WishWhereInput | Prisma.WishWhereInput[]
  OR?: Prisma.WishWhereInput[]
  NOT?: Prisma.WishWhereInput | Prisma.WishWhereInput[]
  title?: Prisma.StringFilter<"Wish"> | string
  description?: Prisma.StringFilter<"Wish"> | string
  link?: Prisma.StringFilter<"Wish"> | string
  isCompleted?: Prisma.BoolFilter<"Wish"> | boolean
  priority?: Prisma.EnumPriorityFilter<"Wish"> | $Enums.Priority
  userId?: Prisma.IntFilter<"Wish"> | number
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}, "id">

export type WishOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  description?: Prisma.SortOrder
  link?: Prisma.SortOrder
  isCompleted?: Prisma.SortOrder
  priority?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  _count?: Prisma.WishCountOrderByAggregateInput
  _avg?: Prisma.WishAvgOrderByAggregateInput
  _max?: Prisma.WishMaxOrderByAggregateInput
  _min?: Prisma.WishMinOrderByAggregateInput
  _sum?: Prisma.WishSumOrderByAggregateInput
}

export type WishScalarWhereWithAggregatesInput = {
  AND?: Prisma.WishScalarWhereWithAggregatesInput | Prisma.WishScalarWhereWithAggregatesInput[]
  OR?: Prisma.WishScalarWhereWithAggregatesInput[]
  NOT?: Prisma.WishScalarWhereWithAggregatesInput | Prisma.WishScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"Wish"> | number
  title?: Prisma.StringWithAggregatesFilter<"Wish"> | string
  description?: Prisma.StringWithAggregatesFilter<"Wish"> | string
  link?: Prisma.StringWithAggregatesFilter<"Wish"> | string
  isCompleted?: Prisma.BoolWithAggregatesFilter<"Wish"> | boolean
  priority?: Prisma.EnumPriorityWithAggregatesFilter<"Wish"> | $Enums.Priority
  userId?: Prisma.IntWithAggregatesFilter<"Wish"> | number
}

export type WishCreateInput = {
  title: string
  description: string
  link: string
  isCompleted?: boolean
  priority?: $Enums.Priority
  user: Prisma.UserCreateNestedOneWithoutWishesInput
}

export type WishUncheckedCreateInput = {
  id?: number
  title: string
  description: string
  link: string
  isCompleted?: boolean
  priority?: $Enums.Priority
  userId: number
}

export type WishUpdateInput = {
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  link?: Prisma.StringFieldUpdateOperationsInput | string
  isCompleted?: Prisma.BoolFieldUpdateOperationsInput | boolean
  priority?: Prisma.EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
  user?: Prisma.UserUpdateOneRequiredWithoutWishesNestedInput
}

export type WishUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  link?: Prisma.StringFieldUpdateOperationsInput | string
  isCompleted?: Prisma.BoolFieldUpdateOperationsInput | boolean
  priority?: Prisma.EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
  userId?: Prisma.IntFieldUpdateOperationsInput | number
}

export type WishCreateManyInput = {
  id?: number
  title: string
  description: string
  link: string
  isCompleted?: boolean
  priority?: $Enums.Priority
  userId: number
}

export type WishUpdateManyMutationInput = {
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  link?: Prisma.StringFieldUpdateOperationsInput | string
  isCompleted?: Prisma.BoolFieldUpdateOperationsInput | boolean
  priority?: Prisma.EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
}

export type WishUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  link?: Prisma.StringFieldUpdateOperationsInput | string
  isCompleted?: Prisma.BoolFieldUpdateOperationsInput | boolean
  priority?: Prisma.EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
  userId?: Prisma.IntFieldUpdateOperationsInput | number
}

export type WishListRelationFilter = {
  every?: Prisma.WishWhereInput
  some?: Prisma.WishWhereInput
  none?: Prisma.WishWhereInput
}

export type WishOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type WishCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  description?: Prisma.SortOrder
  link?: Prisma.SortOrder
  isCompleted?: Prisma.SortOrder
  priority?: Prisma.SortOrder
  userId?: Prisma.SortOrder
}

export type WishAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
}

export type WishMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  description?: Prisma.SortOrder
  link?: Prisma.SortOrder
  isCompleted?: Prisma.SortOrder
  priority?: Prisma.SortOrder
  userId?: Prisma.SortOrder
}

export type WishMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  description?: Prisma.SortOrder
  link?: Prisma.SortOrder
  isCompleted?: Prisma.SortOrder
  priority?: Prisma.SortOrder
  userId?: Prisma.SortOrder
}

export type WishSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
}

export type WishCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.WishCreateWithoutUserInput, Prisma.WishUncheckedCreateWithoutUserInput> | Prisma.WishCreateWithoutUserInput[] | Prisma.WishUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.WishCreateOrConnectWithoutUserInput | Prisma.WishCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.WishCreateManyUserInputEnvelope
  connect?: Prisma.WishWhereUniqueInput | Prisma.WishWhereUniqueInput[]
}

export type WishUncheckedCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.WishCreateWithoutUserInput, Prisma.WishUncheckedCreateWithoutUserInput> | Prisma.WishCreateWithoutUserInput[] | Prisma.WishUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.WishCreateOrConnectWithoutUserInput | Prisma.WishCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.WishCreateManyUserInputEnvelope
  connect?: Prisma.WishWhereUniqueInput | Prisma.WishWhereUniqueInput[]
}

export type WishUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.WishCreateWithoutUserInput, Prisma.WishUncheckedCreateWithoutUserInput> | Prisma.WishCreateWithoutUserInput[] | Prisma.WishUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.WishCreateOrConnectWithoutUserInput | Prisma.WishCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.WishUpsertWithWhereUniqueWithoutUserInput | Prisma.WishUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.WishCreateManyUserInputEnvelope
  set?: Prisma.WishWhereUniqueInput | Prisma.WishWhereUniqueInput[]
  disconnect?: Prisma.WishWhereUniqueInput | Prisma.WishWhereUniqueInput[]
  delete?: Prisma.WishWhereUniqueInput | Prisma.WishWhereUniqueInput[]
  connect?: Prisma.WishWhereUniqueInput | Prisma.WishWhereUniqueInput[]
  update?: Prisma.WishUpdateWithWhereUniqueWithoutUserInput | Prisma.WishUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.WishUpdateManyWithWhereWithoutUserInput | Prisma.WishUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.WishScalarWhereInput | Prisma.WishScalarWhereInput[]
}

export type WishUncheckedUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.WishCreateWithoutUserInput, Prisma.WishUncheckedCreateWithoutUserInput> | Prisma.WishCreateWithoutUserInput[] | Prisma.WishUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.WishCreateOrConnectWithoutUserInput | Prisma.WishCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.WishUpsertWithWhereUniqueWithoutUserInput | Prisma.WishUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.WishCreateManyUserInputEnvelope
  set?: Prisma.WishWhereUniqueInput | Prisma.WishWhereUniqueInput[]
  disconnect?: Prisma.WishWhereUniqueInput | Prisma.WishWhereUniqueInput[]
  delete?: Prisma.WishWhereUniqueInput | Prisma.WishWhereUniqueInput[]
  connect?: Prisma.WishWhereUniqueInput | Prisma.WishWhereUniqueInput[]
  update?: Prisma.WishUpdateWithWhereUniqueWithoutUserInput | Prisma.WishUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.WishUpdateManyWithWhereWithoutUserInput | Prisma.WishUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.WishScalarWhereInput | Prisma.WishScalarWhereInput[]
}

export type BoolFieldUpdateOperationsInput = {
  set?: boolean
}

export type EnumPriorityFieldUpdateOperationsInput = {
  set?: $Enums.Priority
}

export type WishCreateWithoutUserInput = {
  title: string
  description: string
  link: string
  isCompleted?: boolean
  priority?: $Enums.Priority
}

export type WishUncheckedCreateWithoutUserInput = {
  id?: number
  title: string
  description: string
  link: string
  isCompleted?: boolean
  priority?: $Enums.Priority
}

export type WishCreateOrConnectWithoutUserInput = {
  where: Prisma.WishWhereUniqueInput
  create: Prisma.XOR<Prisma.WishCreateWithoutUserInput, Prisma.WishUncheckedCreateWithoutUserInput>
}

export type WishCreateManyUserInputEnvelope = {
  data: Prisma.WishCreateManyUserInput | Prisma.WishCreateManyUserInput[]
}

export type WishUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.WishWhereUniqueInput
  update: Prisma.XOR<Prisma.WishUpdateWithoutUserInput, Prisma.WishUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.WishCreateWithoutUserInput, Prisma.WishUncheckedCreateWithoutUserInput>
}

export type WishUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.WishWhereUniqueInput
  data: Prisma.XOR<Prisma.WishUpdateWithoutUserInput, Prisma.WishUncheckedUpdateWithoutUserInput>
}

export type WishUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.WishScalarWhereInput
  data: Prisma.XOR<Prisma.WishUpdateManyMutationInput, Prisma.WishUncheckedUpdateManyWithoutUserInput>
}

export type WishScalarWhereInput = {
  AND?: Prisma.WishScalarWhereInput | Prisma.WishScalarWhereInput[]
  OR?: Prisma.WishScalarWhereInput[]
  NOT?: Prisma.WishScalarWhereInput | Prisma.WishScalarWhereInput[]
  id?: Prisma.IntFilter<"Wish"> | number
  title?: Prisma.StringFilter<"Wish"> | string
  description?: Prisma.StringFilter<"Wish"> | string
  link?: Prisma.StringFilter<"Wish"> | string
  isCompleted?: Prisma.BoolFilter<"Wish"> | boolean
  priority?: Prisma.EnumPriorityFilter<"Wish"> | $Enums.Priority
  userId?: Prisma.IntFilter<"Wish"> | number
}

export type WishCreateManyUserInput = {
  id?: number
  title: string
  description: string
  link: string
  isCompleted?: boolean
  priority?: $Enums.Priority
}

export type WishUpdateWithoutUserInput = {
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  link?: Prisma.StringFieldUpdateOperationsInput | string
  isCompleted?: Prisma.BoolFieldUpdateOperationsInput | boolean
  priority?: Prisma.EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
}

export type WishUncheckedUpdateWithoutUserInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  link?: Prisma.StringFieldUpdateOperationsInput | string
  isCompleted?: Prisma.BoolFieldUpdateOperationsInput | boolean
  priority?: Prisma.EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
}

export type WishUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  link?: Prisma.StringFieldUpdateOperationsInput | string
  isCompleted?: Prisma.BoolFieldUpdateOperationsInput | boolean
  priority?: Prisma.EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
}



export type WishSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  title?: boolean
  description?: boolean
  link?: boolean
  isCompleted?: boolean
  priority?: boolean
  userId?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["wish"]>

export type WishSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  title?: boolean
  description?: boolean
  link?: boolean
  isCompleted?: boolean
  priority?: boolean
  userId?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["wish"]>

export type WishSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  title?: boolean
  description?: boolean
  link?: boolean
  isCompleted?: boolean
  priority?: boolean
  userId?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["wish"]>

export type WishSelectScalar = {
  id?: boolean
  title?: boolean
  description?: boolean
  link?: boolean
  isCompleted?: boolean
  priority?: boolean
  userId?: boolean
}

export type WishOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "title" | "description" | "link" | "isCompleted" | "priority" | "userId", ExtArgs["result"]["wish"]>
export type WishInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type WishIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type WishIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}

export type $WishPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Wish"
  objects: {
    user: Prisma.$UserPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    title: string
    description: string
    link: string
    isCompleted: boolean
    priority: $Enums.Priority
    userId: number
  }, ExtArgs["result"]["wish"]>
  composites: {}
}

export type WishGetPayload<S extends boolean | null | undefined | WishDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$WishPayload, S>

export type WishCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<WishFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: WishCountAggregateInputType | true
  }

export interface WishDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Wish'], meta: { name: 'Wish' } }
  /**
   * Find zero or one Wish that matches the filter.
   * @param {WishFindUniqueArgs} args - Arguments to find a Wish
   * @example
   * // Get one Wish
   * const wish = await prisma.wish.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends WishFindUniqueArgs>(args: Prisma.SelectSubset<T, WishFindUniqueArgs<ExtArgs>>): Prisma.Prisma__WishClient<runtime.Types.Result.GetResult<Prisma.$WishPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Wish that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {WishFindUniqueOrThrowArgs} args - Arguments to find a Wish
   * @example
   * // Get one Wish
   * const wish = await prisma.wish.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends WishFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, WishFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__WishClient<runtime.Types.Result.GetResult<Prisma.$WishPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Wish that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WishFindFirstArgs} args - Arguments to find a Wish
   * @example
   * // Get one Wish
   * const wish = await prisma.wish.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends WishFindFirstArgs>(args?: Prisma.SelectSubset<T, WishFindFirstArgs<ExtArgs>>): Prisma.Prisma__WishClient<runtime.Types.Result.GetResult<Prisma.$WishPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Wish that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WishFindFirstOrThrowArgs} args - Arguments to find a Wish
   * @example
   * // Get one Wish
   * const wish = await prisma.wish.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends WishFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, WishFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__WishClient<runtime.Types.Result.GetResult<Prisma.$WishPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Wishes that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WishFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Wishes
   * const wishes = await prisma.wish.findMany()
   * 
   * // Get first 10 Wishes
   * const wishes = await prisma.wish.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const wishWithIdOnly = await prisma.wish.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends WishFindManyArgs>(args?: Prisma.SelectSubset<T, WishFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$WishPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Wish.
   * @param {WishCreateArgs} args - Arguments to create a Wish.
   * @example
   * // Create one Wish
   * const Wish = await prisma.wish.create({
   *   data: {
   *     // ... data to create a Wish
   *   }
   * })
   * 
   */
  create<T extends WishCreateArgs>(args: Prisma.SelectSubset<T, WishCreateArgs<ExtArgs>>): Prisma.Prisma__WishClient<runtime.Types.Result.GetResult<Prisma.$WishPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Wishes.
   * @param {WishCreateManyArgs} args - Arguments to create many Wishes.
   * @example
   * // Create many Wishes
   * const wish = await prisma.wish.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends WishCreateManyArgs>(args?: Prisma.SelectSubset<T, WishCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Wishes and returns the data saved in the database.
   * @param {WishCreateManyAndReturnArgs} args - Arguments to create many Wishes.
   * @example
   * // Create many Wishes
   * const wish = await prisma.wish.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Wishes and only return the `id`
   * const wishWithIdOnly = await prisma.wish.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends WishCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, WishCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$WishPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Wish.
   * @param {WishDeleteArgs} args - Arguments to delete one Wish.
   * @example
   * // Delete one Wish
   * const Wish = await prisma.wish.delete({
   *   where: {
   *     // ... filter to delete one Wish
   *   }
   * })
   * 
   */
  delete<T extends WishDeleteArgs>(args: Prisma.SelectSubset<T, WishDeleteArgs<ExtArgs>>): Prisma.Prisma__WishClient<runtime.Types.Result.GetResult<Prisma.$WishPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Wish.
   * @param {WishUpdateArgs} args - Arguments to update one Wish.
   * @example
   * // Update one Wish
   * const wish = await prisma.wish.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends WishUpdateArgs>(args: Prisma.SelectSubset<T, WishUpdateArgs<ExtArgs>>): Prisma.Prisma__WishClient<runtime.Types.Result.GetResult<Prisma.$WishPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Wishes.
   * @param {WishDeleteManyArgs} args - Arguments to filter Wishes to delete.
   * @example
   * // Delete a few Wishes
   * const { count } = await prisma.wish.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends WishDeleteManyArgs>(args?: Prisma.SelectSubset<T, WishDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Wishes.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WishUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Wishes
   * const wish = await prisma.wish.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends WishUpdateManyArgs>(args: Prisma.SelectSubset<T, WishUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Wishes and returns the data updated in the database.
   * @param {WishUpdateManyAndReturnArgs} args - Arguments to update many Wishes.
   * @example
   * // Update many Wishes
   * const wish = await prisma.wish.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Wishes and only return the `id`
   * const wishWithIdOnly = await prisma.wish.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends WishUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, WishUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$WishPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Wish.
   * @param {WishUpsertArgs} args - Arguments to update or create a Wish.
   * @example
   * // Update or create a Wish
   * const wish = await prisma.wish.upsert({
   *   create: {
   *     // ... data to create a Wish
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Wish we want to update
   *   }
   * })
   */
  upsert<T extends WishUpsertArgs>(args: Prisma.SelectSubset<T, WishUpsertArgs<ExtArgs>>): Prisma.Prisma__WishClient<runtime.Types.Result.GetResult<Prisma.$WishPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Wishes.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WishCountArgs} args - Arguments to filter Wishes to count.
   * @example
   * // Count the number of Wishes
   * const count = await prisma.wish.count({
   *   where: {
   *     // ... the filter for the Wishes we want to count
   *   }
   * })
  **/
  count<T extends WishCountArgs>(
    args?: Prisma.Subset<T, WishCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], WishCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Wish.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WishAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends WishAggregateArgs>(args: Prisma.Subset<T, WishAggregateArgs>): Prisma.PrismaPromise<GetWishAggregateType<T>>

  /**
   * Group by Wish.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WishGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends WishGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: WishGroupByArgs['orderBy'] }
      : { orderBy?: WishGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, WishGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWishGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Wish model
 */
readonly fields: WishFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Wish.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__WishClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Wish model
 */
export interface WishFieldRefs {
  readonly id: Prisma.FieldRef<"Wish", 'Int'>
  readonly title: Prisma.FieldRef<"Wish", 'String'>
  readonly description: Prisma.FieldRef<"Wish", 'String'>
  readonly link: Prisma.FieldRef<"Wish", 'String'>
  readonly isCompleted: Prisma.FieldRef<"Wish", 'Boolean'>
  readonly priority: Prisma.FieldRef<"Wish", 'Priority'>
  readonly userId: Prisma.FieldRef<"Wish", 'Int'>
}
    

// Custom InputTypes
/**
 * Wish findUnique
 */
export type WishFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Wish
   */
  select?: Prisma.WishSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Wish
   */
  omit?: Prisma.WishOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WishInclude<ExtArgs> | null
  /**
   * Filter, which Wish to fetch.
   */
  where: Prisma.WishWhereUniqueInput
}

/**
 * Wish findUniqueOrThrow
 */
export type WishFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Wish
   */
  select?: Prisma.WishSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Wish
   */
  omit?: Prisma.WishOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WishInclude<ExtArgs> | null
  /**
   * Filter, which Wish to fetch.
   */
  where: Prisma.WishWhereUniqueInput
}

/**
 * Wish findFirst
 */
export type WishFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Wish
   */
  select?: Prisma.WishSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Wish
   */
  omit?: Prisma.WishOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WishInclude<ExtArgs> | null
  /**
   * Filter, which Wish to fetch.
   */
  where?: Prisma.WishWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Wishes to fetch.
   */
  orderBy?: Prisma.WishOrderByWithRelationInput | Prisma.WishOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Wishes.
   */
  cursor?: Prisma.WishWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Wishes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Wishes.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Wishes.
   */
  distinct?: Prisma.WishScalarFieldEnum | Prisma.WishScalarFieldEnum[]
}

/**
 * Wish findFirstOrThrow
 */
export type WishFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Wish
   */
  select?: Prisma.WishSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Wish
   */
  omit?: Prisma.WishOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WishInclude<ExtArgs> | null
  /**
   * Filter, which Wish to fetch.
   */
  where?: Prisma.WishWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Wishes to fetch.
   */
  orderBy?: Prisma.WishOrderByWithRelationInput | Prisma.WishOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Wishes.
   */
  cursor?: Prisma.WishWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Wishes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Wishes.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Wishes.
   */
  distinct?: Prisma.WishScalarFieldEnum | Prisma.WishScalarFieldEnum[]
}

/**
 * Wish findMany
 */
export type WishFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Wish
   */
  select?: Prisma.WishSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Wish
   */
  omit?: Prisma.WishOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WishInclude<ExtArgs> | null
  /**
   * Filter, which Wishes to fetch.
   */
  where?: Prisma.WishWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Wishes to fetch.
   */
  orderBy?: Prisma.WishOrderByWithRelationInput | Prisma.WishOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Wishes.
   */
  cursor?: Prisma.WishWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Wishes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Wishes.
   */
  skip?: number
  distinct?: Prisma.WishScalarFieldEnum | Prisma.WishScalarFieldEnum[]
}

/**
 * Wish create
 */
export type WishCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Wish
   */
  select?: Prisma.WishSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Wish
   */
  omit?: Prisma.WishOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WishInclude<ExtArgs> | null
  /**
   * The data needed to create a Wish.
   */
  data: Prisma.XOR<Prisma.WishCreateInput, Prisma.WishUncheckedCreateInput>
}

/**
 * Wish createMany
 */
export type WishCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Wishes.
   */
  data: Prisma.WishCreateManyInput | Prisma.WishCreateManyInput[]
}

/**
 * Wish createManyAndReturn
 */
export type WishCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Wish
   */
  select?: Prisma.WishSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Wish
   */
  omit?: Prisma.WishOmit<ExtArgs> | null
  /**
   * The data used to create many Wishes.
   */
  data: Prisma.WishCreateManyInput | Prisma.WishCreateManyInput[]
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WishIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Wish update
 */
export type WishUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Wish
   */
  select?: Prisma.WishSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Wish
   */
  omit?: Prisma.WishOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WishInclude<ExtArgs> | null
  /**
   * The data needed to update a Wish.
   */
  data: Prisma.XOR<Prisma.WishUpdateInput, Prisma.WishUncheckedUpdateInput>
  /**
   * Choose, which Wish to update.
   */
  where: Prisma.WishWhereUniqueInput
}

/**
 * Wish updateMany
 */
export type WishUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Wishes.
   */
  data: Prisma.XOR<Prisma.WishUpdateManyMutationInput, Prisma.WishUncheckedUpdateManyInput>
  /**
   * Filter which Wishes to update
   */
  where?: Prisma.WishWhereInput
  /**
   * Limit how many Wishes to update.
   */
  limit?: number
}

/**
 * Wish updateManyAndReturn
 */
export type WishUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Wish
   */
  select?: Prisma.WishSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Wish
   */
  omit?: Prisma.WishOmit<ExtArgs> | null
  /**
   * The data used to update Wishes.
   */
  data: Prisma.XOR<Prisma.WishUpdateManyMutationInput, Prisma.WishUncheckedUpdateManyInput>
  /**
   * Filter which Wishes to update
   */
  where?: Prisma.WishWhereInput
  /**
   * Limit how many Wishes to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WishIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Wish upsert
 */
export type WishUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Wish
   */
  select?: Prisma.WishSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Wish
   */
  omit?: Prisma.WishOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WishInclude<ExtArgs> | null
  /**
   * The filter to search for the Wish to update in case it exists.
   */
  where: Prisma.WishWhereUniqueInput
  /**
   * In case the Wish found by the `where` argument doesn't exist, create a new Wish with this data.
   */
  create: Prisma.XOR<Prisma.WishCreateInput, Prisma.WishUncheckedCreateInput>
  /**
   * In case the Wish was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.WishUpdateInput, Prisma.WishUncheckedUpdateInput>
}

/**
 * Wish delete
 */
export type WishDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Wish
   */
  select?: Prisma.WishSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Wish
   */
  omit?: Prisma.WishOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WishInclude<ExtArgs> | null
  /**
   * Filter which Wish to delete.
   */
  where: Prisma.WishWhereUniqueInput
}

/**
 * Wish deleteMany
 */
export type WishDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Wishes to delete
   */
  where?: Prisma.WishWhereInput
  /**
   * Limit how many Wishes to delete.
   */
  limit?: number
}

/**
 * Wish without action
 */
export type WishDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Wish
   */
  select?: Prisma.WishSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Wish
   */
  omit?: Prisma.WishOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WishInclude<ExtArgs> | null
}
